const success = (data) => console.log("success", data);
const error = (data) => console.log("error", data);

Sign up

$.ajax({
  method: 'POST',
  url: '/api/user',
  data: {user: {username: "liam", password: "lialia", first_name: "Liam", last_name: "Michnikov", email: "liam.michnikov@gmail.com"}},
  success,
  error
});

Sign in

$.ajax({
  method: 'POST',
  url: '/api/session',
  data: {user: {username: "greg", password: "gregre"}},
  success,
  error
});

Sign out

$.ajax({
  method: 'DELETE',
  url: '/api/session',
  success,
  error,
});



Questions

Iron out the routes


API Endpoints Questions

  Will users see the word api?
  GET /api/users/:id - for user profile pages
  GET /api/followed_users ?
  I will need to be able to return the the followers/followees of a given user, I am not sure if that requires a separate api endpoint

  GET /api/session ?

  I anticipate adding all places myself and not allowing additions. Not sure if this requires a POST API endpoint.

  Places index (to show most reviewed places) / search (to allow users to find places)
  Would listing all places vs. returning search results hit different controller actions?

  Following places?

  GET /api/suggestions
    suggestions index
    needs to be filterable, not sure if that would require another endpoint, or if it is better to fetch all of them and then filter?
    Guidebook-Entries

  I am not sure how best to structure this, this could be totally wrong
  POST /suggestions/:suggestion_id/guidebook_entry/:guidebook_id

Routes Questions

  What about routes that don't match? 404 with search bar?
  Do routes all have #
  Should I mirror the routes + names?
    They call splash landing page /
    They call signup /create
    They call login /login
    They call logged in landing page /home

    Sign Up (redirects to home if logged in)
    login (redirects to home if logged in)
    / (redirects to home if logged in)
    /Home
    /Places   either houses most popular, or redirects there?
      id
      most-popular
    /search (or /places/search?)
    /users/user_id
      suggestions
      guidebooks
        guidebook_id
      followers
      following
      my_places


Components
  Same container for follows/followed
  Do I need an App Container if nothing is shared by all pages?
  Is Header just a component that is included on many pages?
  How to handle the generic feed container that appears in multiple places? (passing in filters)

Redux cycle
  "popular places" vs "places that match the search request"
  Since guidebooks index is always going to be a specific user's guidebooks, I am not sure if it would make sense to include a user_id in the API url?



State
Maximum set of suggestions
  Home - All
  Single Place - Just that place
  User Page - Just that user
  Guidebook - Just in that guidebook

  Single Suggestion - Not the feed

Filters
Food Att Acc High My Places My Friends, My Places


Some next steps
  Update/delete suggestions
  adjust zoom on map depending on place_type
  add star to highlight post, add images that represent food/accom/attr/highlight
  change search to return places by num reviews
  Need to have an option to remove belmont from my places
  icons
    media
    wallpaper
    border color
    mode edit
    photo library
    person Add
    star - highlight
    visibility - attraction
    favorite for liking
    highlight off
    highlight
    hotel -accom
    local dining

User data list for profile top/side
  reviews, places reviewed, followed users, followers, guidebooks, followed places


For later
  same search component in header and search, styled differently?
  add more styling to login buttons
  save all visible reviews to a guidebook

Figure out a photo strategy, for checkins, users, places

user place history, like beer History
try username routes
